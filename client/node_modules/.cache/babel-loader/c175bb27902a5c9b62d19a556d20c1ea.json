{"ast":null,"code":"import _regeneratorRuntime from\"/Users/austinhill/Development/_Pojects/royal-sky/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/austinhill/Development/_Pojects/royal-sky/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/austinhill/Development/_Pojects/royal-sky/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Route}from'react-router-dom';import{connect}from'react-redux';import CollectionsOverview from'../../components/collections-overview/collection-overview.component';import CollectionPage from'../collection/collection.component';import WithSpinner from'../../components/with-spinner/with-spinner.component';import{firestore,convertCollectionsSnapshotToMap}from'../../firebase/firebase.util';import{updateCollections as _updateCollections}from'../../redux/shop/shop.actions';var CollectionOverviewWithSpinner=WithSpinner(CollectionsOverview);var CollectionPageWithSpinner=WithSpinner(CollectionPage);var ShopPage=function ShopPage(_ref){var match=_ref.match,updateCollections=_ref.updateCollections;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var unsubscribeFromSnapshot=null;useEffect(function(){var collectionRef=firestore.collection('collections');collectionRef.onSnapshot(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(snapshot){var collectionsMap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:collectionsMap=convertCollectionsSnapshotToMap(snapshot);updateCollections(collectionsMap);setLoading(false);case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}());},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"shop-page\"},/*#__PURE__*/React.createElement(Route,{exact:true,path:\"\".concat(match.path),render:function render(props){return/*#__PURE__*/React.createElement(CollectionOverviewWithSpinner,Object.assign({isLoading:loading},props));}}),/*#__PURE__*/React.createElement(Route,{path:\"\".concat(match.path,\"/:collectionId\"),render:function render(props){return/*#__PURE__*/React.createElement(CollectionPageWithSpinner,Object.assign({isLoading:loading},props));}}));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{updateCollections:function updateCollections(collectionsMap){return dispatch(_updateCollections(collectionsMap));}};};export default connect(null,mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/austinhill/Development/_Pojects/royal-sky/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","useState","Route","connect","CollectionsOverview","CollectionPage","WithSpinner","firestore","convertCollectionsSnapshotToMap","updateCollections","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","match","loading","setLoading","unsubscribeFromSnapshot","collectionRef","collection","onSnapshot","snapshot","collectionsMap","path","props","mapDispatchToProps","dispatch"],"mappings":"kfAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,KAAT,KAAsB,kBAAtB,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAOC,CAAAA,mBAAP,KAAgC,qEAAhC,CACA,MAAOC,CAAAA,cAAP,KAA2B,oCAA3B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,sDAAxB,CAEA,OAASC,SAAT,CAAoBC,+BAApB,KAA2D,8BAA3D,CACA,OAASC,iBAAiB,GAAjBA,CAAAA,kBAAT,KAAkC,+BAAlC,CAEA,GAAMC,CAAAA,6BAA6B,CAAGJ,WAAW,CAACF,mBAAD,CAAjD,CACA,GAAMO,CAAAA,yBAAyB,CAAGL,WAAW,CAACD,cAAD,CAA7C,CAEA,GAAMO,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAkC,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBJ,iBAAwB,MAAxBA,iBAAwB,eACnBR,QAAQ,CAAC,IAAD,CADW,wCAC1Ca,OAD0C,eACjCC,UADiC,eAEjD,GAAMC,CAAAA,uBAAuB,CAAG,IAAhC,CAEAhB,SAAS,CAAC,UAAM,CACd,GAAMiB,CAAAA,aAAa,CAAGV,SAAS,CAACW,UAAV,CAAqB,aAArB,CAAtB,CACAD,aAAa,CAACE,UAAd,2FAAyB,iBAAMC,QAAN,qIACjBC,cADiB,CACAb,+BAA+B,CAACY,QAAD,CAD/B,CAEvBX,iBAAiB,CAACY,cAAD,CAAjB,CACAN,UAAU,CAAC,KAAD,CAAV,CAHuB,sDAAzB,iEAKD,CAPQ,CAON,EAPM,CAAT,CASA,mBAEE,2BAAK,SAAS,CAAC,WAAf,eACE,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,WAAKF,KAAK,CAACS,IAAX,CAAjB,CAAoC,MAAM,CAAE,gBAACC,KAAD,qBAAY,oBAAC,6BAAD,gBAA+B,SAAS,CAAET,OAA1C,EAAuDS,KAAvD,EAAZ,EAA5C,EADF,cAEE,oBAAC,KAAD,EAAO,IAAI,WAAKV,KAAK,CAACS,IAAX,kBAAX,CAA4C,MAAM,CAAE,gBAACC,KAAD,qBAAY,oBAAC,yBAAD,gBAA2B,SAAS,CAAET,OAAtC,EAAmDS,KAAnD,EAAZ,EAApD,EAFF,CAFF,CAOD,CApBD,CAsBA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,QAAe,CACxChB,iBAAiB,CAAE,2BAAAY,cAAc,QAAII,CAAAA,QAAQ,CAAChB,kBAAiB,CAACY,cAAD,CAAlB,CAAZ,EADO,CAAf,EAA3B,CAIA,cAAelB,CAAAA,OAAO,CAAC,IAAD,CAAOqB,kBAAP,CAAP,CAAkCZ,QAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport CollectionsOverview from '../../components/collections-overview/collection-overview.component'\nimport CollectionPage from '../collection/collection.component'\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component'\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.util'\nimport { updateCollections } from '../../redux/shop/shop.actions';\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview)\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\nconst ShopPage = ({ match, updateCollections }) => {\n  const [loading, setLoading] = useState(true)\n  const unsubscribeFromSnapshot = null;\n\n  useEffect(() => {\n    const collectionRef = firestore.collection('collections')\n    collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n      updateCollections(collectionsMap)\n      setLoading(false)\n    })\n  }, [])\n\n  return (\n\n    <div className='shop-page'>\n      <Route exact path={`${match.path}`} render={(props) => (<CollectionOverviewWithSpinner isLoading={loading} {...props} />)} />\n      <Route path={`${match.path}/:collectionId`} render={(props) => (<CollectionPageWithSpinner isLoading={loading} {...props} />)} />\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}